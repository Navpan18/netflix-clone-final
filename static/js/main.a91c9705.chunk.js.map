{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","loaded","setLoaded","useEffect","a","get","request","data","results","fetchData","className","map","movie","style","display","color","highlightColor","width","height","count","onLoad","onClick","movieTrailer","name","original_title","original_name","then","url","urlParams","URLSearchParams","URL","search","handleClick","backdrop_path","src","poster_path","alt","id","videoId","opts","playerVars","autoplay","API_KEY","process","requests","fetchTrending","fetchNetflixOriginals","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","fetchTopRated","Banner","str","n","setMovie","Math","floor","random","length","backgroundSize","backgroundImage","backgroundPosition","originalName","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a91c9705.chunk.js","sourcesContent":["import axios from \"axios\"\r\n\r\nconst instance = axios.create({\r\n    baseURL:'https://api.themoviedb.org/3'\r\n})\r\nexport default instance;","import React, { useEffect, useState } from \"react\";\r\nimport axios from \"./axios\";\r\nimport \"./Row.css\";\r\nimport Youtube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\nimport Skeleton, { SkeletonTheme } from \"react-loading-skeleton\";\r\n\r\nconst baseurl = \"http://image.tmdb.org/t/p/w500\";\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow}) {\r\n  const [movies, setMovies] = useState([]);\r\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n  const [loaded, setLoaded] = useState(false);\r\n\r\n  useEffect(() => {\r\n    //you can't use async function inside use effect so you to make an internal function and call it\r\n    async function fetchData() {\r\n      const request = await axios.get(fetchUrl);\r\n      // axios.get(fetchUrl) -> https://api.themoviedb.org/3{fetchUrl}\r\n      setMovies(request.data.results);\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, [fetchUrl]); // the variable taken outside of useffect must be added here\r\n\r\n  const opts = {\r\n    height: \"390\",\r\n    width: \"100%\",\r\n    playerVars: {\r\n      autoplay: 1,\r\n    },\r\n  };\r\n  const handleClick = (movie) => {\r\n    if (trailerUrl) {\r\n      setTrailerUrl(\"\");\r\n    } else {\r\n      movieTrailer(\r\n        movie?.name || movie?.original_title || movie?.original_name || \"\"\r\n      )\r\n        .then((url) => {if(url){\r\n          const urlParams = new URLSearchParams(new URL(url).search);\r\n          setTrailerUrl(urlParams.get(\"v\"));}\r\n        })\r\n    }\r\n  };\r\n  return (<>\r\n    <div className=\"row\">\r\n      {/* title */}\r\n      <h2>{title}</h2>\r\n      {/* container -> posters */}\r\n      <div className=\"row_posters\">\r\n        {movies.map((movie) => (\r\n          <>\r\n            <p style={!loaded ? { display: \"block\" } : { display: \"none\" }}>\r\n              <SkeletonTheme color=\"#202020\" highlightColor=\"#444\">\r\n                <p>\r\n                  <Skeleton\r\n                    className={`${!isLargeRow?\"abc\":\"abcBig\"}`}\r\n                    width=\"100px\"\r\n                    height=\"100px\"\r\n                    count={1}\r\n                  />\r\n                </p>\r\n              </SkeletonTheme>\r\n            </p>\r\n            <img\r\n              style={loaded ? { display: \"inline-block\" } : { display: \"none\" }}\r\n              key={movie.id}\r\n              onLoad={() => setLoaded(true)}\r\n              onClick={() => handleClick(movie)}\r\n              className={`row_poster ${\r\n                movie.backdrop_path == null && \"row_bdp\"\r\n              } ${isLargeRow && \"row_posterLarge\"}`}\r\n              src={`${baseurl}${\r\n                isLargeRow ? movie.poster_path : movie.backdrop_path\r\n              }`}\r\n              alt={movie.name}\r\n            />\r\n          </>\r\n        ))}\r\n      </div>\r\n      {trailerUrl && <Youtube videoId={trailerUrl} opts={opts} />}\r\n    </div></>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n","const API_KEY = process.env.REACT_APP_API_KEY;\r\n\r\nconst requests = {\r\n    fetchTrending:`/trending/all/day?api_key=${API_KEY}`,\r\n    fetchNetflixOriginals : `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchActionMovies : `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies : `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies : `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies : `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries : `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n    fetchTopRated : `/movie/top_rated?api_key=${API_KEY}&language=en-US&page=1`\r\n\r\n}\r\n\r\nexport default requests;","import React, { useEffect, useState } from \"react\";\r\nimport axios from \"./axios\";\r\nimport requests from \"./requests.js\";\r\nimport './Banner.css'\r\n\r\nfunction Banner() {\r\n    const [movie, setMovie] = useState([]);\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(requests.fetchTrending);\r\n            setMovie(\r\n                request.data.results[\r\n                    Math.floor(Math.random() * request.data.results.length - 1)\r\n                ]\r\n                );\r\n            }\r\n            fetchData();\r\n        }, []);\r\n        function truncate(str,n){\r\n            return str?.length>n?str.substr(0,n-1) + \"...\" :str;\r\n        }\r\n  return (\r\n    <header className=\"banner\"\r\n    style={{\r\n        backgroundSize:'cover',\r\n        backgroundImage:`url(\"http://image.tmdb.org/t/p/original${movie?.backdrop_path}\")`,\r\n        backgroundPosition: 'center center'\r\n    }}>\r\n      <div className=\"banner_contents\">\r\n        {/* background image */}\r\n        {/* title */}\r\n        <h1 className='banner_title'>{movie?.title || movie?.name || movie?.originalName}</h1>\r\n        {/* div>2buttons */}\r\n        <div className=\"banner_buttons\">\r\n            <button className=\"banner_button\">Play</button>\r\n            <button className=\"banner_button\">My List</button>\r\n        </div>\r\n        {/* description */}\r\n        <h1 className=\"banner_desc\">{truncate(movie?.overview,150)}</h1>\r\n      </div>\r\n      <div className=\"banner--fadeBottom\" />\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Banner;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport './Nav.css'\r\n\r\nfunction Nav() {\r\n    const [show,handleShow] = useState(false);\r\n    useEffect(() => {\r\n        window.addEventListener('scroll',()=>{\r\n            if(window.scrollY > 100){\r\n                handleShow(true)\r\n            }\r\n            else handleShow(false);\r\n        })\r\n        return ()=>{\r\n            window.removeEventListener('scroll')\r\n        }\r\n    }, [])\r\n  return (\r\n    <div className={`nav ${show && \"nav_black\"}`}>\r\n      <img\r\n        className=\"nav_logo\"\r\n        src=\"https://www.logo.wine/a/logo/Netflix/Netflix-Logo.wine.svg\"\r\n        alt=\"Netflix logo\"\r\n      />\r\n      <img\r\n        className=\"nav_avatar\"\r\n        src=\"https://cdn2.iconfinder.com/data/icons/avatars-99/62/avatar-370-456322-512.png\"\r\n        alt=\"Netflix Avatar\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import './App.css';\r\nimport Row from './Row'\r\nimport requests from './requests'\r\nimport Banner from './Banner'\r\nimport Nav from './Nav'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      {/* navbar */}\r\n      <Nav />\r\n      {/* banner */}\r\n      <Banner/>\r\n      {/* Rows */}\r\n      <Row isLargeRow={true} title='Netflix Originals' fetchUrl={requests.fetchNetflixOriginals} />\r\n      <Row title='Trending Now' fetchUrl={requests.fetchTrending} /> \r\n      <Row title='Top Rated' fetchUrl={requests.fetchTopRated} /> \r\n      <Row title='Action Movies' fetchUrl={requests.fetchActionMovies} /> \r\n      <Row title='Comedy Movies' fetchUrl={requests.fetchComedyMovies} /> \r\n      <Row title='Horror Movies' fetchUrl={requests.fetchHorrorMovies} /> \r\n      <Row title='Romance Movies' fetchUrl={requests.fetchRomanceMovies} /> \r\n      <Row title='Documentaries' fetchUrl={requests.fetchDocumentaries} /> \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}